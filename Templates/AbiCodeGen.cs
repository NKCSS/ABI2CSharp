// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Abi2CSharp.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AbiCodeGen : AbiCodeGenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// Auto Generated, do not edit.\r\n");
            
            #line 7 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosioModels) { 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Globalization;\r\nusing System.IO;\r\n");
            
            #line 11 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 } 
if (includeEosSharpTest)
{ 
            
            #line default
            #line hidden
            this.Write("using EosSharp;\r\nusing EosSharp.Core;\r\nusing EosSharp.Core.Api.v1;\r\nusing System." +
                    "Net.Http;\r\n");
            
            #line 18 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("using System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\n");
            
            #line 21 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"

int lowerBound = (int)'0', upperBound = (int)'9';
Func<string, string, string> getSafeName = (name, prefix) => {
    if (name.StartsWith("Model.eosio.")) return name;
    int firstCharCode = (int)name[0];
    return ((firstCharCode < lowerBound || firstCharCode > upperBound) ? name : $"{prefix}{name}").Replace('.','_');
};

            
            #line default
            #line hidden
            this.Write("namespace AlterMe\r\n{\r\n    /// <summary>\r\n    /// EosApi defines api methods to in" +
                    "terface with a http handler\r\n    /// </summary>\r\n    public static partial class" +
                    " Contracts\r\n    {    \r\n        public static class ");
            
            #line 36 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(exportName, "c_")));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            public const string contract = \"");
            
            #line 38 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractName));
            
            #line default
            #line hidden
            this.Write("\";\r\n            public static class Actions\r\n            {\r\n");
            
            #line 41 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 foreach (var action in actions) { 
    string name = getSafeName(action.name, "t_");
    if(name == action.name)
    { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 45 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = nameof(");
            
            #line 45 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 46 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 47 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = \"");
            
            #line 47 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 48 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  }
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Tables\r\n            {\r\n");
            
            #line 53 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 foreach (var table in tables) { 
    string name = getSafeName(table.name, "t_");
    if(name == table.name)
    { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 57 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = nameof(");
            
            #line 57 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 58 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 59 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = \"");
            
            #line 59 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 60 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  }
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Types\r\n            {\r\n");
            
            #line 65 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 foreach (var type in types.Keys) { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 66 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(type, "t_")));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 67 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  foreach (var field in types[type])
    { 
            
            #line default
            #line hidden
            this.Write("                    public ");
            
            #line 69 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(field.Value, "t_")));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 69 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Key));
            
            #line default
            #line hidden
            this.Write("  { get; set; }\r\n");
            
            #line 70 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 73 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Requests\r\n            {\r\n");
            
            #line 77 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 foreach (var action in actions) { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 78 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(action.name, "t_")));
            
            #line default
            #line hidden
            this.Write(" : Types.");
            
            #line 78 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(action.type, "t_")));
            
            #line default
            #line hidden
            this.Write("\r\n                {\r\n                }\r\n");
            
            #line 81 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Responses\r\n            {\r\n");
            
            #line 85 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 foreach (var table in tables) { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 86 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(table.name, "t_")));
            
            #line default
            #line hidden
            this.Write(" : Types.");
            
            #line 86 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeName(table.type, "t_")));
            
            #line default
            #line hidden
            this.Write("\r\n                {\r\n                }\r\n");
            
            #line 89 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n        }\r\n    }\r\n");
            
            #line 93 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 if (includeExtensions) { 
            
            #line default
            #line hidden
            this.Write("    public static class Extensions\r\n    {\r\n        #region Name-based constants\r\n" +
                    "        const int NameMaxCharLength = 13;\r\n        /// <summary>\r\n        /// Th" +
                    "e amount of bits an Antelope name is encoded into.\r\n        /// </summary>\r\n    " +
                    "    const int NameBitLength = 64;\r\n        /// <summary>\r\n        /// The amount" +
                    " of bits we can use per character.\r\n        /// </summary>\r\n        const int Bi" +
                    "tsPerNameValue = 5;\r\n        /// <summary>\r\n        /// The amount of charcters " +
                    "that can use the full bit length we need (12)\r\n        /// </summary>\r\n        c" +
                    "onst int NameFullBitCharCount = NameBitLength / BitsPerNameValue;\r\n        /// <" +
                    "summary>\r\n        /// The amount of bits that can have the full-length (60 in ou" +
                    "r case)\r\n        /// </summary>\r\n        const int NameBitsWithFullBitLength = N" +
                    "ameFullBitCharCount * BitsPerNameValue;\r\n        /// <summary>\r\n        /// The " +
                    "amount of bits that remain for the last value (4)\r\n        /// </summary>\r\n     " +
                    "   const int NameRestBits = NameBitLength - NameBitsWithFullBitLength;\r\n        " +
                    "/// <summary>\r\n        /// The last bit index that has <see cref=\"BitsPerNameVal" +
                    "ue\"/> bits per encoded character.\r\n        /// </summary>\r\n        /// <remarks>" +
                    "\r\n        /// Indexes are 0-based, so we take the amount of bits that are full-l" +
                    "ength values and substract 1.\r\n        /// </remarks>\r\n        const int LastFul" +
                    "lLengthNameBitIndex = NameBitsWithFullBitLength - 1;\r\n        /// <summary>\r\n   " +
                    "     /// The bitmask we use to extract the bits from the value. We shift by the " +
                    "bit length (e.g. overshoot), \r\n        /// then substract 1 to get a full set of" +
                    " binary 1 flags for our desired bit length.\r\n        /// </summary>\r\n        con" +
                    "st int NameValueBitMask = (1 << BitsPerNameValue) - 1;\r\n        /// <summary>\r\n " +
                    "       /// The bitmask we use to extract the bits from the value. We shift by th" +
                    "e bit length (e.g. overshoot), \r\n        /// then substract 1 to get a full set " +
                    "of binary 1 flags for our desired bit length.\r\n        /// </summary>\r\n        c" +
                    "onst int NameRestBitMask = (1 << NameRestBits) - 1;\r\n        #endregion\r\n       " +
                    " static Dictionary<char, byte> CharByteLookup;\r\n        static Dictionary<byte, " +
                    "char> ByteCharLookup;\r\n        static Dictionary<string, byte> HexLookup;\r\n     " +
                    "   static Extensions()\r\n        {\r\n            CharByteLookup = new Dictionary<c" +
                    "har, byte>();\r\n            ByteCharLookup = new Dictionary<byte, char>();\r\n     " +
                    "       CharByteLookup.Add(\'.\', 0);\r\n            ByteCharLookup.Add(0, \'.\');\r\n   " +
                    "         for (byte i = 1; i <= 5; ++i)\r\n            {\r\n                CharByteL" +
                    "ookup.Add(i.ToString()[0], i);\r\n                ByteCharLookup.Add(i, i.ToString" +
                    "()[0]);\r\n            }\r\n            byte offset = \'a\' - 6;\r\n            for (cha" +
                    "r c = \'a\'; c <= \'z\'; ++c)\r\n            {\r\n                CharByteLookup.Add(c, " +
                    "(byte)((byte)c - offset));\r\n                ByteCharLookup.Add((byte)((byte)c - " +
                    "offset), c);\r\n            }\r\n            HexLookup = new Dictionary<string, byte" +
                    ">(byte.MaxValue);\r\n            string hex;\r\n            for (int i = byte.MinVal" +
                    "ue; i <= byte.MaxValue; ++i)\r\n            {\r\n                hex = i.ToString(\"x" +
                    "2\");\r\n                HexLookup.Add(hex, (byte)i);\r\n                // Add upper" +
                    "case variants too, just to be sure\r\n                hex = hex.ToUpperInvariant()" +
                    ";\r\n                if (!HexLookup.ContainsKey(hex)) HexLookup.Add(hex, (byte)i);" +
                    "\r\n            }\r\n        }\r\n        public static ulong NameToLong(this string n" +
                    "ame)\r\n        {\r\n            ulong result = 0L;\r\n            int bitIndex = 0, i" +
                    ";\r\n            byte c;\r\n            // Process the full-bit-length characters\r\n " +
                    "           for (i = 0; i < NameFullBitCharCount; i++)\r\n            {\r\n          " +
                    "      c = i < name.Length ? CharByteLookup[name[i]] : (byte)0;\r\n                " +
                    "if ((c & 0b00001) == 0b00001) result += 1UL << (59 - bitIndex);\r\n               " +
                    " if ((c & 0b00010) == 0b00010) result += 1UL << (60 - bitIndex);\r\n              " +
                    "  if ((c & 0b00100) == 0b00100) result += 1UL << (61 - bitIndex);\r\n             " +
                    "   if ((c & 0b01000) == 0b01000) result += 1UL << (62 - bitIndex);\r\n            " +
                    "    if ((c & 0b10000) == 0b10000) result += 1UL << (63 - bitIndex);\r\n           " +
                    "     bitIndex += 5;\r\n            }\r\n            // Process the last 4 bits\r\n    " +
                    "        c = i < name.Length ? CharByteLookup[name[i]] : (byte)0;\r\n            if" +
                    " ((c & 0b0001) == 0b0001) result += 1UL;\r\n            if ((c & 0b0010) == 0b0010" +
                    ") result += 1UL << 1;\r\n            if ((c & 0b0100) == 0b0100) result += 1UL << " +
                    "2;\r\n            if ((c & 0b1000) == 0b1000) result += 1UL << 3;\r\n            ret" +
                    "urn result;\r\n        }\r\n        public static string ToName(this ulong value)\r\n " +
                    "       {\r\n            char[] result = new char[NameMaxCharLength];\r\n            " +
                    "byte v;\r\n            char c;\r\n            int resultIndex = 0;\r\n            // T" +
                    "he first 60 bits are 5-bits per value; \r\n            for (int i = 0; i < NameBit" +
                    "sWithFullBitLength; i += BitsPerNameValue)\r\n            {\r\n                v = (" +
                    "byte)((value >> LastFullLengthNameBitIndex - i) & NameValueBitMask);\r\n          " +
                    "      c = ByteCharLookup[v];\r\n                result[resultIndex++] = c;\r\n      " +
                    "      }\r\n            v = (byte)(value & NameRestBitMask);\r\n            c = ByteC" +
                    "harLookup[v];\r\n            result[resultIndex] = c;\r\n            // Strip any tr" +
                    "ailing 0-values (e.g. \'.\')\r\n            return new string(result).TrimEnd(ByteCh" +
                    "arLookup[0]);\r\n        }\r\n    }\r\n");
            
            #line 211 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 }
            
            #line default
            #line hidden
            
            #line 212 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosioModels) { 
            
            #line default
            #line hidden
            this.Write("\tnamespace Model.eosio\r\n\t{\r\n\t\tpublic class Asset\r\n\t\t{\r\n\t\t\tconst string EnglishCul" +
                    "tureName = \"en-GB\";\r\n\t\t\tstatic readonly CultureInfo EnglishCulture = new Culture" +
                    "Info(EnglishCultureName);\r\n\t\t\tpublic Symbol Token { get; set; }\r\n\t\t\tpublic UInt6" +
                    "4 Balance { get; set; }\r\n\t\t\t[Newtonsoft.Json.JsonIgnore]\r\n\t\t\tpublic decimal Bala" +
                    "nceDecimal { get => Balance / (decimal)Token.Factor; set => Balance = (ulong)(va" +
                    "lue * (decimal)Token.Factor); }\r\n\t\t\t/// <remarks>\r\n\t\t\t/// We use the F string fo" +
                    "rmat so there is only a decimal, no thousand separator.\r\n\t\t\t/// </remarks>\r\n\t\t\tp" +
                    "ublic override string ToString() => $\"{BalanceDecimal.ToString($\"F{Token.precisi" +
                    "on}\", EnglishCulture)} {Token.name}\";\r\n\t\t\tpublic Asset() { } // Empty constructo" +
                    "r for serializing\r\n\t\t\tpublic static implicit operator Asset(string value)\r\n\t\t\t{\r" +
                    "\n\t\t\t\tAsset result = new Asset();\r\n\t\t\t\tstring[] parts = value.Split(\' \');\r\n\t\t\t\tif" +
                    " (parts.Length != 2) throw new ArgumentException($\"Cannot parse \'{value}\' as a v" +
                    "alid token balance\", nameof(value));\r\n\t\t\t\tstring[] valueParts = parts[0].Split(\'" +
                    ".\');\r\n\t\t\t\tresult.Token = new Symbol(\r\n\t\t\t\t\tname: parts[1], \r\n\t\t\t\t\tprecision: (by" +
                    "te)(valueParts.Length == 2 ? valueParts[1].Length : 0)\r\n\t\t\t\t);\r\n\t\t\t\tif (decimal." +
                    "TryParse(parts[0], NumberStyles.AllowDecimalPoint, EnglishCulture, out decimal b" +
                    "alance)) result.BalanceDecimal = balance;\r\n\t\t\t\telse throw new ArgumentException(" +
                    "$\"Unable to parse \'{parts[0]}\' as a valid decimal\");\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n" +
                    "\t\t}\t\t\r\n        public class Name\r\n        {\r\n            ulong _Value;\r\n        " +
                    "    string _Name;\r\n            public ulong Value \r\n            { \r\n            " +
                    "    get => _Value; \r\n                set \r\n                {\r\n                  " +
                    "  if(value != _Value)\r\n                    {\r\n                        _Value = v" +
                    "alue;\r\n                        _Name = value.ToName();\r\n                    }\r\n " +
                    "               } \r\n            }\r\n            public string AsString { \r\n       " +
                    "         get => _Name;\r\n                set\r\n                {\r\n                " +
                    "    if(value != _Name)\r\n                    {\r\n                        _Name = v" +
                    "alue;\r\n                        _Value = AsString.NameToLong();\r\n                " +
                    "    }\r\n                }\r\n            }\r\n            public Name(string value)\r\n" +
                    "            {\r\n                AsString = value;\r\n            }\r\n            pub" +
                    "lic Name(ulong value)\r\n            {\r\n                Value = value;\r\n          " +
                    "  }\r\n            public static implicit operator ulong(Name value) => value.Valu" +
                    "e;\r\n            public static implicit operator string (Name value) => value.AsS" +
                    "tring;\r\n            public static explicit operator Name(ulong value) => new Nam" +
                    "e(value);\r\n            public static explicit operator Name(string value) => new" +
                    " Name(value);\r\n            public override string ToString() => AsString;\r\n     " +
                    "   }        \r\n        public class Symbol\r\n        {\r\n\t        const char Separa" +
                    "tor = \',\';\r\n\t        const int FixedNameByteLength = 7;\r\n            public byte" +
                    " precision { get; set; }\r\n            public string name { get; set; }\r\n\t       " +
                    " /// <remarks>\r\n\t        /// <see cref=\"System.Math.Pow\">System.Math.Pow(10, 0)<" +
                    "/see> returns 1, \r\n\t        /// otherwise, this should have been written with a " +
                    "<see cref=\"System.Math.Max\"/>\r\n\t        /// </remarks>\r\n\t        [Newtonsoft.Jso" +
                    "n.JsonIgnore]\r\n\t        public double Factor { get => System.Math.Pow(10, precis" +
                    "ion); }\r\n\t        public Symbol() { }\r\n\t        public Symbol(string name, byte " +
                    "precision) {\r\n\t\t        this.name = name;\r\n\t\t        this.precision = precision;" +
                    "\r\n\t        }\r\n\t        public static explicit operator Symbol(string value)\r\n   " +
                    "         {\r\n\t\t        string[] parts = value.Split(Separator);\r\n\t\t        if (pa" +
                    "rts.Length != 2) throw new System.ArgumentException($\"Symbol should be precision" +
                    ", followed by name, separated by \'{Separator}\'\", nameof(value));\r\n\t\t        else" +
                    " if (!byte.TryParse(parts[0], out byte precision)) throw new System.ArgumentExce" +
                    "ption($\"Can\'t parse \'{parts[0]}\' as precision\", nameof(value));\r\n\t\t        else " +
                    "return new Symbol(parts[1], precision);\r\n\t        }\r\n\t        public override st" +
                    "ring ToString() => $\"{precision}{Separator}{name}\";\r\n        }\r\n\t} \r\n");
            
            #line 311 "C:\Users\dnno\Downloads\eos-sharp-master\EosSharp\Abi2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AbiCodeGenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
