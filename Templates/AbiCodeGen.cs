// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Abi2CSharp.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AbiCodeGen : AbiCodeGenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// Auto Generated, do not edit.\r\n");
            
            #line 7 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosioModels) { 
            
            #line default
            #line hidden
            this.Write("using System.Globalization;\r\nusing System.IO;\r\nusing Abi2CSharp.Model.eosio;\r\n");
            
            #line 11 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
if (includeEosSharpTest)
{ 
            
            #line default
            #line hidden
            this.Write("using EosSharp;\r\nusing EosSharp.Core;\r\nusing EosSharp.Core.Api.v1;\r\nusing System." +
                    "Net.Http;\r\nusing System.Linq;\r\n");
            
            #line 19 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
if (includeEosSharpTest || includeEosioModels)
{ 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing Newtonsoft.Json;\r\n");
            
            #line 24 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("using System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\n");
            
            #line 27 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"

HashSet<string> ReservedKeyWords = new HashSet<string> {
    "abstract",
    "as",
    "base",
    "bool",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "checked",
    "class",
    "const",
    "continue",
    "decimal",
    "default",
    "delegate",
    "do",
    "double",
    "else",
    "enum",
    "event",
    "explicit",
    "extern",
    "false",
    "finally",
    "fixed",
    "float",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "int",
    "interface",
    "internal",
    "is",
    "lock",
    "long",
    "namespace",
    "new",
    "null",
    "object",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "ref",
    "return",
    "sbyte",
    "sealed",
    "short",
    "sizeof",
    "stackalloc",
    "static",
    "string",
    "struct",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "uint",
    "ulong",
    "unchecked",
    "unsafe",
    "ushort",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
};
Dictionary<string, string> classRemap = new Dictionary<string, string>();
int lowerBound = (int)'0', upperBound = (int)'9';
Func<string, string, string> getSafeTypeName = (name, prefix) => {
    if (name.StartsWith("Model.eosio.")) return name;
    int firstCharCode = (int)name[0];
    return ((firstCharCode < lowerBound || firstCharCode > upperBound) ? name : $"{prefix}{name}").Replace('.','_');
};
Func<string, string, string> getSafeFieldName = (name, prefix) => {
    if (ReservedKeyWords.Contains(name)) return $"@{name}";
    int firstCharCode = (int)name[0];
    return ((firstCharCode < lowerBound || firstCharCode > upperBound) ? name : $"{prefix}{name}");
};
string contractClassTypeName = getSafeTypeName(exportName, "c_");

            
            #line default
            #line hidden
            this.Write("namespace Abi2CSharp\r\n{\r\n    public static partial class Contracts\r\n    {\r\n      " +
                    "  public static class ");
            
            #line 125 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractClassTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            public const string contract = \"");
            
            #line 127 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractName));
            
            #line default
            #line hidden
            this.Write("\";\r\n            public static class Actions\r\n            {\r\n");
            
            #line 130 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (var action in actions) { 
    string name = getSafeTypeName(action.name, "t_");
    if(name == action.name)
    { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 134 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = nameof(");
            
            #line 134 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 135 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("                public const string ");
            
            #line 136 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = \"");
            
            #line 136 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 137 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  }
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Tables\r\n            {\r\n");
            
            #line 142 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (var table in tables) { 
    string name = getSafeTypeName(table.name, "t_");
    string typeNameName = getSafeTypeName(table.type, "t_");
    { 
            
            #line default
            #line hidden
            this.Write("                // Rows are of type ");
            
            #line 146 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeNameName));
            
            #line default
            #line hidden
            this.Write(". If you want helper code generated, enable includeEosSharpTest\r\n                " +
                    "public static class ");
            
            #line 147 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\r\n                {\r\n                    public const string TableName = \"");
            
            #line 149 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 150 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosSharpTest) { 
            
            #line default
            #line hidden
            this.Write("                    public static Task<GetTableRowsResponse<Types.");
            
            #line 151 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeNameName));
            
            #line default
            #line hidden
            this.Write(">> Query(EosApi api, bool reverse = false, uint? keyIndex = null, string search =" +
                    " null, string lowerBound = null, string upperBound = null, string scope = null, " +
                    "int maxResults = 10) \r\n                        => api.GetTableRows<Types.");
            
            #line 152 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeNameName));
            
            #line default
            #line hidden
            this.Write(">(new GetTableRowsRequest()\r\n                        {\r\n                         " +
                    "   json = true,\r\n                            code = Contracts.");
            
            #line 155 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractClassTypeName));
            
            #line default
            #line hidden
            this.Write(".contract,\r\n                            scope = scope ?? Contracts.");
            
            #line 156 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractClassTypeName));
            
            #line default
            #line hidden
            this.Write(".contract,\r\n                            table = Contracts.");
            
            #line 157 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contractClassTypeName));
            
            #line default
            #line hidden
            this.Write(".Tables.");
            
            #line 157 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(@".TableName,
                            reverse = reverse,
                            show_payer = false,
                            index_position = keyIndex,
                            lower_bound = search ?? lowerBound,
                            upper_bound = search ?? upperBound,
                            limit = maxResults,
                        });
");
            
            #line 165 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 167 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  }
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Types\r\n            {\r\n");
            
            #line 172 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (string i in VariantInterfaces) { 
            
            #line default
            #line hidden
            this.Write("                public interface ");
            
            #line 173 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" { }\r\n");
            
            #line 174 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            
            #line 175 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (var type in types.Keys) { 
    var fields = types[type];
    string className;
    // Check if there are any children with the same name as their parent class; if so, we need to change the parent class due to serialization limitations of EosSharp.
    if (fields.Any(f => f.Key == type))
    {
        className = $"c_{type}";
        classRemap.Add(type, className);
    }
    else
    {
        className = getSafeTypeName(type, "t_");
    }
    if (variantUsageLookup.TryGetValue(type, out var interfaces))
    { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 190 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 190 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", interfaces)));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 191 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 194 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 195 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  }
foreach (var field in types[type])
    { 
            
            #line default
            #line hidden
            this.Write("                    public ");
            
            #line 198 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeTypeName(field.Value, "t_")));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 198 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeFieldName(field.Key, "t_")));
            
            #line default
            #line hidden
            this.Write("  { get; set; }\r\n");
            
            #line 199 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 202 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Requests\r\n            {\r\n         " +
                    "       const string DefaultPermission = \"active\";\r\n");
            
            #line 207 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (var action in actions) { 
    string 
        classNameSafe = getSafeTypeName(action.name, "t_"),
        underlyingType = getSafeTypeName(classRemap.TryGetValue(action.type, out string remapped) ? remapped : action.type, "t_");

            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 212 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classNameSafe));
            
            #line default
            #line hidden
            this.Write(" : Types.");
            
            #line 212 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));
            
            #line default
            #line hidden
            this.Write("\r\n                {                \r\n");
            
            #line 214 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosSharpTest)
{ 
            
            #line default
            #line hidden
            this.Write("                    public static EosSharp.Core.Api.v1.Action CreateAction(Model." +
                    "eosio.Name wallet, Types.");
            
            #line 216 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));
            
            #line default
            #line hidden
            this.Write(" data) => CreateAction(wallet, data, DefaultPermission);\r\n                    pub" +
                    "lic static EosSharp.Core.Api.v1.Action CreateAction(Model.eosio.Name wallet, Typ" +
                    "es.");
            
            #line 217 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));
            
            #line default
            #line hidden
            this.Write(" data, Model.eosio.Name permission)\r\n                        =>\r\n                " +
                    "        new EosSharp.Core.Api.v1.Action()\r\n                        {\r\n          " +
                    "                  account = contract,\r\n                            name = Action" +
                    "s.");
            
            #line 222 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classNameSafe));
            
            #line default
            #line hidden
            this.Write(",\r\n                            authorization = new List<PermissionLevel>() { new " +
                    "PermissionLevel() { actor = wallet, permission = permission } },\r\n              " +
                    "              data = data\r\n                        };\r\n");
            
            #line 226 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 228 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n            public static class Responses\r\n            {\r\n");
            
            #line 232 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 foreach (var table in tables) { 
            
            #line default
            #line hidden
            this.Write("                public class ");
            
            #line 233 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeTypeName(table.name, "t_")));
            
            #line default
            #line hidden
            this.Write(" : Types.");
            
            #line 233 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeTypeName(table.type, "t_")));
            
            #line default
            #line hidden
            this.Write("\r\n                {\r\n                }\r\n");
            
            #line 236 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
} 
            
            #line default
            #line hidden
            this.Write("            }\r\n        }\r\n    }\r\n");
            
            #line 240 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 if (includeExtensions) { 
            
            #line default
            #line hidden
            this.Write("    public static class Extensions\r\n    {\r\n        const char NULL = \'\\0\';\r\n     " +
                    "   const int BitsPerByte = 8;\r\n        const int BytesPer256Bits = 256 / BitsPer" +
                    "Byte;        \r\n        const int Zero = (int)\'0\';\r\n        const int HexAFOffset" +
                    " = 10;\r\n        const int UpperCaseA = (int)\'A\';\r\n        const int UpperCaseAOf" +
                    "fset = UpperCaseA - HexAFOffset;\r\n        const int LowerCaseA = (int)\'a\';\r\n    " +
                    "    const int LowerCaseAOffset = LowerCaseA - HexAFOffset;\r\n        #region Name" +
                    "-based constants\r\n        const int NameMaxCharLength = 13;\r\n        /// <summar" +
                    "y>\r\n        /// The amount of bits an Antelope name is encoded into.\r\n        //" +
                    "/ </summary>\r\n        const int NameBitLength = 64;\r\n        /// <summary>\r\n    " +
                    "    /// The amount of bits we can use per character.\r\n        /// </summary>\r\n  " +
                    "      const int BitsPerNameValue = 5;\r\n        /// <summary>\r\n        /// The am" +
                    "ount of charcters that can use the full bit length we need (12)\r\n        /// </s" +
                    "ummary>\r\n        const int NameFullBitCharCount = NameBitLength / BitsPerNameVal" +
                    "ue;\r\n        /// <summary>\r\n        /// The amount of bits that can have the ful" +
                    "l-length (60 in our case)\r\n        /// </summary>\r\n        const int NameBitsWit" +
                    "hFullBitLength = NameFullBitCharCount * BitsPerNameValue;\r\n        /// <summary>" +
                    "\r\n        /// The amount of bits that remain for the last value (4)\r\n        ///" +
                    " </summary>\r\n        const int NameRestBits = NameBitLength - NameBitsWithFullBi" +
                    "tLength;\r\n        /// <summary>\r\n        /// The last bit index that has <see cr" +
                    "ef=\"BitsPerNameValue\"/> bits per encoded character.\r\n        /// </summary>\r\n   " +
                    "     /// <remarks>\r\n        /// Indexes are 0-based, so we take the amount of bi" +
                    "ts that are full-length values and substract 1.\r\n        /// </remarks>\r\n       " +
                    " const int LastFullLengthNameBitIndex = NameBitsWithFullBitLength - 1;\r\n        " +
                    "/// <summary>\r\n        /// The bitmask we use to extract the bits from the value" +
                    ". We shift by the bit length (e.g. overshoot), \r\n        /// then substract 1 to" +
                    " get a full set of binary 1 flags for our desired bit length.\r\n        /// </sum" +
                    "mary>\r\n        const int NameValueBitMask = (1 << BitsPerNameValue) - 1;\r\n      " +
                    "  /// <summary>\r\n        /// The bitmask we use to extract the bits from the val" +
                    "ue. We shift by the bit length (e.g. overshoot), \r\n        /// then substract 1 " +
                    "to get a full set of binary 1 flags for our desired bit length.\r\n        /// </s" +
                    "ummary>\r\n        const int NameRestBitMask = (1 << NameRestBits) - 1;\r\n        #" +
                    "endregion\r\n        static Dictionary<char, byte> CharByteLookup;\r\n        static" +
                    " Dictionary<byte, char> ByteCharLookup;\r\n        static Extensions()\r\n        {\r" +
                    "\n            CharByteLookup = new Dictionary<char, byte>();\r\n            ByteCha" +
                    "rLookup = new Dictionary<byte, char>();\r\n            CharByteLookup.Add(\'.\', 0);" +
                    "\r\n            ByteCharLookup.Add(0, \'.\');\r\n            for (byte i = 1; i <= 5; " +
                    "++i)\r\n            {\r\n                CharByteLookup.Add(i.ToString()[0], i);\r\n  " +
                    "              ByteCharLookup.Add(i, i.ToString()[0]);\r\n            }\r\n          " +
                    "  byte offset = \'a\' - 6;\r\n            for (char c = \'a\'; c <= \'z\'; ++c)\r\n       " +
                    "     {\r\n                CharByteLookup.Add(c, (byte)((byte)c - offset));\r\n      " +
                    "          ByteCharLookup.Add((byte)((byte)c - offset), c);\r\n            }\r\n     " +
                    "   }\r\n        public static string ReadEosioString(this BinaryReader br) => Syst" +
                    "em.Text.Encoding.UTF8.GetString(br.ReadBytes(br.DecodeInt32()));\r\n        public" +
                    " static string ToName(this ulong value)\r\n        {\r\n            char[] result = " +
                    "new char[NameMaxCharLength];\r\n            byte v;\r\n            char c;\r\n        " +
                    "    int resultIndex = 0;\r\n            // The first 60 bits are 5-bits per value;" +
                    " \r\n            for (int i = 0; i < NameBitsWithFullBitLength; i += BitsPerNameVa" +
                    "lue)\r\n            {\r\n                v = (byte)((value >> LastFullLengthNameBitI" +
                    "ndex - i) & NameValueBitMask);\r\n                c = ByteCharLookup[v];\r\n        " +
                    "        result[resultIndex++] = c;\r\n            }\r\n            v = (byte)(value " +
                    "& NameRestBitMask);\r\n            c = ByteCharLookup[v];\r\n            result[resu" +
                    "ltIndex] = c;\r\n            // Strip any trailing 0-values (e.g. \'.\')\r\n          " +
                    "  return new string(result).TrimEnd(ByteCharLookup[0]);\r\n        }\r\n        publ" +
                    "ic static ulong NameToLong(this string name)\r\n        {\r\n            ulong resul" +
                    "t = 0L;\r\n            int bitIndex = 0, i;\r\n            byte c;\r\n            // P" +
                    "rocess the full-bit-length characters\r\n            for (i = 0; i < NameFullBitCh" +
                    "arCount; i++)\r\n            {\r\n                c = i < name.Length ? CharByteLook" +
                    "up[name[i]] : (byte)0;\r\n                if ((c & 0b00001) == 0b00001) result += " +
                    "1UL << (59 - bitIndex);\r\n                if ((c & 0b00010) == 0b00010) result +=" +
                    " 1UL << (60 - bitIndex);\r\n                if ((c & 0b00100) == 0b00100) result +" +
                    "= 1UL << (61 - bitIndex);\r\n                if ((c & 0b01000) == 0b01000) result " +
                    "+= 1UL << (62 - bitIndex);\r\n                if ((c & 0b10000) == 0b10000) result" +
                    " += 1UL << (63 - bitIndex);\r\n                bitIndex += 5;\r\n            }\r\n    " +
                    "        // Process the last 4 bits\r\n            c = i < name.Length ? CharByteLo" +
                    "okup[name[i]] : (byte)0;\r\n            if ((c & 0b0001) == 0b0001) result += 1UL;" +
                    "\r\n            if ((c & 0b0010) == 0b0010) result += 1UL << 1;\r\n            if ((" +
                    "c & 0b0100) == 0b0100) result += 1UL << 2;\r\n            if ((c & 0b1000) == 0b10" +
                    "00) result += 1UL << 3;\r\n            return result;\r\n        }\r\n        public s" +
                    "tatic int GetHexVal(this char hex)\r\n        {\r\n            int val = (int)hex;\r\n" +
                    "            if (val < UpperCaseA)\r\n                return val - Zero;\r\n         " +
                    "   else if (val < LowerCaseA)\r\n                return val - UpperCaseAOffset;\r\n " +
                    "           return\r\n                val - LowerCaseAOffset;\r\n        }\r\n        p" +
                    "ublic static byte[] ToByteArrayFastest(this string hex)\r\n        {\r\n            " +
                    "if (hex.Length % 2 == 1)\r\n                throw new Exception(\"The binary key ca" +
                    "nnot have an odd number of digits\");\r\n            int byteCount = hex.Length >> " +
                    "1;\r\n\r\n            byte[] arr = new byte[byteCount];\r\n\r\n            for (int i = " +
                    "0; i < byteCount; ++i)\r\n            {\r\n                arr[i] = (byte)((hex[i <<" +
                    " 1].GetHexVal() << 4) + hex[(i << 1) + 1].GetHexVal());\r\n            }\r\n\r\n      " +
                    "      return arr;\r\n        }\r\n        public static string ToHexUpper(this byte[" +
                    "] value)\r\n        {\r\n            char[] result = new char[value.Length * 2];\r\n  " +
                    "          int index = 0;\r\n            byte b;\r\n            for (int ix = 0; ix <" +
                    " result.Length; ix += 2)\r\n            {\r\n                b = value[index++];\r\n  " +
                    "              result[ix] = GetHexUpper(b / 16);\r\n                result[ix + 1] " +
                    "= GetHexUpper(b % 16);\r\n            }\r\n            return new string(result);\r\n " +
                    "       }\r\n        public static string ToHexLower(this byte[] value)\r\n        {\r" +
                    "\n            char[] result = new char[value.Length * 2];\r\n            int index " +
                    "= 0;\r\n            byte b;\r\n            for (int ix = 0; ix < result.Length; ix +" +
                    "= 2)\r\n            {\r\n                b = value[index++];\r\n                result" +
                    "[ix] = GetHexLower(b / 16);\r\n                result[ix + 1] = GetHexLower(b % 16" +
                    ");\r\n            }\r\n            return new string(result);\r\n        }\r\n        st" +
                    "atic char GetHexUpper(int i)\r\n        {\r\n            if (i < 0 || i > 15) throw " +
                    "new ArgumentException(\"Value must be between 0 and 15\");\r\n            else if (i" +
                    " < 10) return (char)(i + \'0\');\r\n            return (char)(i - 10 + \'A\');\r\n      " +
                    "  }\r\n        static char GetHexLower(int i)\r\n        {\r\n            if (i < 0 ||" +
                    " i > 15) throw new ArgumentException(\"Value must be between 0 and 15\");\r\n       " +
                    "     else if (i < 10) return (char)(i + \'0\');\r\n            return (char)(i - 10 " +
                    "+ \'a\');\r\n        }\r\n    }\r\n    public static class VariableLengthInteger\r\n    {\r" +
                    "\n        const int BitsPerByte = 8;\r\n        const int DataBits = BitsPerByte - " +
                    "1;\r\n        const int DataBitMask = (1 << DataBits) - 1;\r\n        const int Cont" +
                    "inuationBit = 1 << DataBits;\r\n        public static void EncodeInt32(this Binary" +
                    "Writer writer, int value)\r\n        {\r\n            if (writer == null)\r\n         " +
                    "       throw new ArgumentNullException(nameof(writer));\r\n            if (value <" +
                    " 0)\r\n                throw new ArgumentOutOfRangeException(nameof(value), value," +
                    " $\"{nameof(value)} must be 0 or greater\");\r\n            foreach(byte val in valu" +
                    "e.EncodeInt32())\r\n                writer.Write(val);\r\n        }\r\n        public " +
                    "static IEnumerable<byte> EncodeInt32(this uint value)\r\n        {\r\n            do" +
                    "\r\n            {\r\n                // Grab the lowest 7-bits of the value\r\n       " +
                    "         byte lower7bits = (byte)(value & DataBitMask);\r\n                // Then" +
                    " shift the value by 7 and check if there is any value left.\r\n                val" +
                    "ue >>= DataBits;\r\n                if (value > 0) // If anything remains, ensure " +
                    "the continuation bit is set by OR-ing with 10000000 (1 + 7 bits from the data)\r\n" +
                    "                    lower7bits |= ContinuationBit;\r\n                yield return" +
                    " lower7bits;\r\n            } while (value > 0);\r\n        }\r\n        public static" +
                    " IEnumerable<byte> EncodeInt32(this int value)\r\n        {\r\n            if (value" +
                    " < 0) throw new ArgumentOutOfRangeException(nameof(value), value, $\"{nameof(valu" +
                    "e)} must be 0 or greater\");\r\n            foreach(var b in EncodeInt32((uint)valu" +
                    "e)) \r\n                yield return b;\r\n        }\r\n        public static int Deco" +
                    "deInt32(this BinaryReader reader)\r\n        {\r\n            if (reader == null) th" +
                    "row new ArgumentNullException(nameof(reader));\r\n            bool more = true;\r\n " +
                    "           int value = 0, shift = 0;\r\n            while (more)\r\n            {\r\n " +
                    "               byte lower7bits = reader.ReadByte();\r\n                more = (low" +
                    "er7bits & ContinuationBit) != 0;\r\n                value |= (lower7bits & DataBit" +
                    "Mask) << shift;\r\n                shift += DataBits;\r\n            }\r\n            " +
                    "return value;\r\n        }\r\n        public static int DecodeInt32(this IEnumerable" +
                    "<byte> bytes, bool breakOnNoMore = false)\r\n        {\r\n            if (bytes == n" +
                    "ull) throw new ArgumentNullException(nameof(bytes));\r\n            bool more = tr" +
                    "ue;\r\n            int value = 0, shift = 0;\r\n            foreach(byte lower7bits " +
                    "in bytes)\r\n            {\r\n                more = (lower7bits & ContinuationBit) " +
                    "!= 0;\r\n                value |= (lower7bits & DataBitMask) << shift;\r\n          " +
                    "      shift += DataBits;\r\n                if (breakOnNoMore && !more) break;\r\n  " +
                    "          }\r\n            if (more) throw new ArgumentException(\"Last byte still " +
                    "had the \'more\' flag set!\", nameof(bytes));\r\n            return value;\r\n        }" +
                    "\r\n        public static int DecodeInt32(this MemoryStream ms)\r\n        {\r\n      " +
                    "      if (ms == null) throw new ArgumentNullException(nameof(ms));\r\n            " +
                    "bool more = true;\r\n            int value = 0, shift = 0;\r\n            while (mor" +
                    "e)\r\n            {\r\n                byte lower7bits = (byte)ms.ReadByte();\r\n     " +
                    "           more = (lower7bits & ContinuationBit) != 0;\r\n                value |=" +
                    " (lower7bits & DataBitMask) << shift;\r\n                shift += DataBits;\r\n     " +
                    "       }\r\n            return value;\r\n        }\r\n    }    \r\n    public class Cust" +
                    "omJsonConverter<T>\r\n        : JsonConverter\r\n        where T : ICustomSerialize<" +
                    "T>\r\n    {\r\n        public override bool CanConvert(Type objectType) => true;\r\n  " +
                    "      public override void WriteJson(JsonWriter writer, object value, JsonSerial" +
                    "izer serializer)\r\n        {\r\n            if (value is ICustomSerialize<T> t) wri" +
                    "ter.WriteValue(t.Serialize());\r\n        }\r\n        public override bool CanRead " +
                    "{ get => true; }\r\n        public override object ReadJson(JsonReader reader, Typ" +
                    "e objectType, object existingValue, JsonSerializer serializer)\r\n        {\r\n     " +
                    "       if (objectType.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTy" +
                    "peDefinition() == typeof(ICustomSerialize<>)))\r\n            {\r\n                i" +
                    "f ((existingValue ?? Activator.CreateInstance<T>()) is ICustomSerialize<T> t) re" +
                    "turn t.Deserialize(reader);\r\n            }\r\n            return null;\r\n        }\r" +
                    "\n    }\r\n");
            
            #line 517 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 }
            
            #line default
            #line hidden
            
            #line 518 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 if (includeEosioModels) { 
            
            #line default
            #line hidden
            this.Write("\tnamespace Model.eosio\r\n\t{\r\n        public interface ICustomSerialize<T>\r\n       " +
                    " {\r\n            string Serialize();\r\n            T Deserialize(JsonReader reader" +
                    ");\r\n        }\r\n        [JsonConverter(typeof(CustomJsonConverter<Asset>))]\r\n\t   " +
                    " public class Asset : ICustomSerialize<Asset>\r\n\t    {\r\n\t\t    const string Englis" +
                    "hCultureName = \"en-GB\";\r\n\t\t    static readonly CultureInfo EnglishCulture = new " +
                    "CultureInfo(EnglishCultureName);\r\n\t\t    public Symbol Token { get; set; }\r\n\t\t   " +
                    " public UInt64 Balance { get; set; }\r\n\t\t    [Newtonsoft.Json.JsonIgnore]\r\n\t\t    " +
                    "public decimal BalanceDecimal { get => Balance / (decimal)Token.Factor; set => B" +
                    "alance = (ulong)(value * (decimal)Token.Factor); }\r\n\t\t    /// <remarks>\r\n\t\t    /" +
                    "// We use the F string format so there is only a decimal, no thousand separator." +
                    "\r\n\t\t    /// </remarks>\r\n\t\t    public override string ToString() => $\"{BalanceDec" +
                    "imal.ToString($\"F{Token.precision}\", EnglishCulture)} {Token.name}\";\r\n          " +
                    "  public Asset() { } // Empty constructor for serializing\r\n\t\t    public static i" +
                    "mplicit operator Asset(string value)\r\n\t\t    {\r\n\t\t\t    Asset result = new Asset()" +
                    ";\r\n\t\t\t    string[] parts = value.Split(\' \');\r\n\t\t\t    if (parts.Length != 2) thro" +
                    "w new ArgumentException($\"Cannot parse \'{value}\' as a valid token balance\", name" +
                    "of(value));\r\n\t\t\t    string[] valueParts = parts[0].Split(\'.\');\r\n\t\t\t    result.To" +
                    "ken = new Symbol(\r\n\t\t\t\t    name: parts[1], \r\n\t\t\t\t    precision: (byte)(valuePart" +
                    "s.Length == 2 ? valueParts[1].Length : 0)\r\n\t\t\t    );\r\n\t\t\t    if (decimal.TryPars" +
                    "e(parts[0], NumberStyles.AllowDecimalPoint, EnglishCulture, out decimal balance)" +
                    ") result.BalanceDecimal = balance;\r\n\t\t\t    else throw new ArgumentException($\"Un" +
                    "able to parse \'{parts[0]}\' as a valid decimal\");\r\n\t\t\t    return result;\r\n\t\t    }" +
                    "\r\n\t\t    public static implicit operator string(Asset value) => value.ToString();" +
                    "\r\n\t\t    public string Serialize() => ToString();\r\n\t\t    public Asset Deserialize" +
                    "(JsonReader reader) => (string)reader.Value;\r\n\t\t    public override int GetHashC" +
                    "ode() => ToString().GetHashCode();\r\n\t\t    public override bool Equals(object obj" +
                    ") => obj?.GetHashCode().Equals(GetHashCode()) ?? false;\r\n\t    }\r\n        [JsonCo" +
                    "nverter(typeof(CustomJsonConverter<CheckSum256>))]\r\n        public class CheckSu" +
                    "m256 : ICustomSerialize<CheckSum256>\r\n        {\r\n            const int BitsPerBy" +
                    "te = 8;\r\n            const int HexCharsPerByte = 2;\r\n            internal const " +
                    "int ExpectedLength = (256 / BitsPerByte) * 2;\r\n            byte[] _Raw;\r\n       " +
                    "     string _AsString;\r\n            public byte[] Raw\r\n            {\r\n          " +
                    "      get => _Raw;\r\n                set\r\n                {\r\n                    " +
                    "_Raw = value;\r\n                    _AsString = value.ToHexLower();\r\n            " +
                    "    }\r\n            }\r\n            public string AsString\r\n            {\r\n       " +
                    "         get => _AsString;\r\n                set\r\n                {\r\n            " +
                    "        _AsString = value;\r\n                    _Raw = value.ToByteArrayFastest(" +
                    ");\r\n                }\r\n            }\r\n            public CheckSum256() { } // Em" +
                    "pty constructor for serializing\r\n            public CheckSum256(string value)\r\n " +
                    "           {\r\n                AsString = value;\r\n            }\r\n            publ" +
                    "ic static implicit operator CheckSum256(string value)\r\n            {\r\n          " +
                    "      int valueLength = value?.Length ?? 0;\r\n                if (valueLength != " +
                    "ExpectedLength) throw new System.ArgumentException($\"A {nameof(CheckSum256)} sho" +
                    "uld be {ExpectedLength} bytes in length. Supplied value byte length: {valueLengt" +
                    "h}\", nameof(value));\r\n                else return new CheckSum256(value);\r\n     " +
                    "       }\r\n            public static implicit operator string(CheckSum256 value) " +
                    "=> value.AsString;\r\n            public override string ToString() => AsString;\r\n" +
                    "            public string Serialize() => AsString;\r\n            public CheckSum2" +
                    "56 Deserialize(JsonReader reader) => (string)reader.Value;\r\n            public o" +
                    "verride int GetHashCode() => AsString.GetHashCode();\r\n            public overrid" +
                    "e bool Equals(object obj) => obj?.GetHashCode().Equals(GetHashCode()) ?? false;\r" +
                    "\n        }\r\n        [JsonConverter(typeof(CustomJsonConverter<Name>))]\r\n        " +
                    "public class Name : ICustomSerialize<Name>\r\n        {\r\n            ulong _Value;" +
                    "\r\n            string _Name;\r\n            public ulong Value \r\n            { \r\n  " +
                    "              get => _Value; \r\n                set \r\n                {\r\n        " +
                    "            if(value != _Value)\r\n                    {\r\n                        " +
                    "_Value = value;\r\n                        _Name = value.ToName();\r\n              " +
                    "      }\r\n                } \r\n            }\r\n            public string AsString {" +
                    " \r\n                get => _Name;\r\n                set\r\n                {\r\n      " +
                    "              if(value != _Name)\r\n                    {\r\n                       " +
                    " _Name = value;\r\n                        _Value = AsString.NameToLong();\r\n      " +
                    "              }\r\n                }\r\n            }\r\n            public Name() { }" +
                    " // Empty constructor for serializing\r\n            public Name(string value)\r\n  " +
                    "          {\r\n                AsString = value;\r\n            }\r\n            publi" +
                    "c Name(ulong value)\r\n            {\r\n                Value = value;\r\n            " +
                    "}\r\n            public static implicit operator ulong(Name value) => value.Value;" +
                    "\r\n            public static implicit operator string (Name value) => value.AsStr" +
                    "ing;\r\n            public static implicit operator Name(ulong value) => new Name(" +
                    "value);\r\n            public static implicit operator Name(string value) => new N" +
                    "ame(value);\r\n            public override string ToString() => AsString;\r\n       " +
                    "     public string Serialize() => AsString;\r\n            public Name Deserialize" +
                    "(JsonReader reader) => (string)reader.Value;\r\n            public override int Ge" +
                    "tHashCode() => AsString.GetHashCode();\r\n            public override bool Equals(" +
                    "object obj) => obj?.GetHashCode().Equals(GetHashCode()) ?? false;\r\n        }    " +
                    "    \r\n\t    [JsonConverter(typeof(CustomJsonConverter<Symbol>))]\r\n\t    public cla" +
                    "ss Symbol : ICustomSerialize<Symbol>\r\n\t    {\r\n\t\t    const char Separator = \',\';\r" +
                    "\n            public byte precision { get; set; }\r\n            public string name" +
                    " { get; set; }\r\n\t\t    /// <remarks>\r\n\t\t    /// <see cref=\"System.Math.Pow\">Syste" +
                    "m.Math.Pow(10, 0)</see> returns 1, \r\n\t\t    /// otherwise, this should have been " +
                    "written with a <see cref=\"System.Math.Max\"/>\r\n\t\t    /// </remarks>\r\n\t\t    [Newto" +
                    "nsoft.Json.JsonIgnore]\r\n\t\t    public double Factor { get => System.Math.Pow(10, " +
                    "precision); }\r\n\t\t    public Symbol() { } // Empty constructor for serializing\r\n\t" +
                    "\t    public Symbol(string name, byte precision) {\r\n\t\t\t    this.name = name;\r\n\t\t\t" +
                    "    this.precision = precision;\r\n\t\t    }\r\n\t\t    public static implicit operator " +
                    "Symbol(string value)\r\n            {\r\n\t\t\t    string[] parts = value.Split(Separat" +
                    "or);\r\n\t\t\t    if (parts.Length != 2) throw new System.ArgumentException($\"Symbol " +
                    "should be precision, followed by name, separated by \'{Separator}\'\", nameof(value" +
                    "));\r\n\t\t\t    else if (!byte.TryParse(parts[0], out byte precision)) throw new Sys" +
                    "tem.ArgumentException($\"Can\'t parse \'{parts[0]}\' as precision\", nameof(value));\r" +
                    "\n\t\t\t    else return new Symbol(parts[1], precision);\r\n\t\t    }\r\n\t\t    public stat" +
                    "ic implicit operator string(Symbol value) => value.ToString();\r\n\t\t    public ove" +
                    "rride string ToString() => $\"{precision}{Separator}{name}\";\r\n\t\t    public string" +
                    " Serialize() => ToString();\r\n\t\t    public Symbol Deserialize(JsonReader reader) " +
                    "=> (string)reader.Value;\r\n\t\t    public override int GetHashCode() => ToString()." +
                    "GetHashCode();\r\n\t\t    public override bool Equals(object obj) => obj?.GetHashCod" +
                    "e().Equals(GetHashCode()) ?? false;\r\n\t    }\r\n        [JsonConverter(typeof(Custo" +
                    "mJsonConverter<TimePoint>))]\r\n        public class TimePoint : ICustomSerialize<" +
                    "TimePoint>\r\n        {\r\n            ulong _Value;\r\n            DateTime _Moment;\r" +
                    "\n            public ulong Value \r\n            { \r\n                get => _Value;" +
                    " \r\n                set \r\n                {\r\n                    if(value != _Val" +
                    "ue)\r\n                    {\r\n                        _Value = value;\r\n           " +
                    "             _Moment = DateTime.UnixEpoch.AddMilliseconds(value);\r\n             " +
                    "       }\r\n                } \r\n            }\r\n            public DateTime Moment\r" +
                    "\n            { \r\n                get => _Moment;\r\n                set\r\n         " +
                    "       {\r\n                    if(value != _Moment)\r\n                    {\r\n     " +
                    "                   _Moment = value;\r\n                        _Value = (ulong)val" +
                    "ue.Subtract(DateTime.UnixEpoch).TotalMilliseconds;\r\n                    }\r\n     " +
                    "           }\r\n            }\r\n            public TimePoint() { } // Empty constru" +
                    "ctor for serializing\r\n            public TimePoint(ulong value)\r\n            {\r\n" +
                    "                Value = value;\r\n            }\r\n            public TimePoint(stri" +
                    "ng value)\r\n            {\r\n                Moment = DateTime.SpecifyKind(DateTime" +
                    ".ParseExact(value, \"yyyy-MM-dd\'T\'HH:mm:ss.fff\", System.Globalization.CultureInfo" +
                    ".InvariantCulture), DateTimeKind.Utc);\r\n            }\r\n            public TimePo" +
                    "int(DateTime value)\r\n            {\r\n                Moment = value;\r\n           " +
                    " }\r\n            public static implicit operator ulong(TimePoint value) => value." +
                    "Value;\r\n            public static implicit operator DateTime(TimePoint value) =>" +
                    " value.Moment;\r\n            public static implicit operator TimePoint(ulong valu" +
                    "e) => new TimePoint(value);\r\n            public static implicit operator TimePoi" +
                    "nt(DateTime value) => new TimePoint(value);\r\n            public static implicit " +
                    "operator TimePoint(string value) => new TimePoint(value);\r\n            public ov" +
                    "erride string ToString() => Moment.ToString(\"yyyy-MM-dd HH:mm:ss.fff\");\r\n       " +
                    "     public string Serialize() => Value.ToString();\r\n            /// <summary>\r\n" +
                    "            /// NewtonSoft already deserializes the DateTime string properly, so" +
                    " we just need to ensure we specify it\'s in UTC, but we also support ulong and ra" +
                    "w string.\r\n            /// </summary>\r\n            /// <param name=\"reader\"></pa" +
                    "ram>\r\n            /// <returns></returns>\r\n            public TimePoint Deserial" +
                    "ize(JsonReader reader)\r\n            {\r\n                if (reader.Value is DateT" +
                    "ime t) return DateTime.SpecifyKind(t, DateTimeKind.Utc);\r\n                else i" +
                    "f (reader.Value is string s) return ulong.TryParse(s, out ulong v) ? new TimePoi" +
                    "nt(v) : new TimePoint(s);\r\n                else throw new ArgumentException($\"Ca" +
                    "nnot deserialize \'{reader.Value}\' as a {nameof(TimePoint)}\");\r\n            }\r\n  " +
                    "          public override int GetHashCode() => Moment.GetHashCode();\r\n          " +
                    "  public override bool Equals(object obj) => obj?.GetHashCode().Equals(GetHashCo" +
                    "de()) ?? false;\r\n        }\r\n        [JsonConverter(typeof(CustomJsonConverter<Ti" +
                    "mePointSec>))]\r\n        public class TimePointSec : ICustomSerialize<TimePointSe" +
                    "c>\r\n        {\r\n            uint _Value;\r\n            DateTime _Moment;\r\n        " +
                    "    public uint Value \r\n            { \r\n                get => _Value; \r\n       " +
                    "         set \r\n                {\r\n                    if(value != _Value)\r\n     " +
                    "               {\r\n                        _Value = value;\r\n                     " +
                    "   _Moment = DateTime.UnixEpoch.AddSeconds(value);\r\n                    }\r\n     " +
                    "           } \r\n            }\r\n            public DateTime Moment\r\n            { " +
                    "\r\n                get => _Moment;\r\n                set\r\n                {\r\n     " +
                    "               if(value != _Moment)\r\n                    {\r\n                    " +
                    "    _Moment = value;\r\n                        _Value = (uint)value.Subtract(Date" +
                    "Time.UnixEpoch).TotalSeconds;\r\n                    }\r\n                }\r\n       " +
                    "     }\r\n            public TimePointSec() { } // Empty constructor for serializi" +
                    "ng\r\n            public TimePointSec(uint value)\r\n            {\r\n                " +
                    "Value = value;\r\n            }\r\n            public TimePointSec(string value)\r\n  " +
                    "          {\r\n                Moment = DateTime.SpecifyKind(DateTime.ParseExact(v" +
                    "alue, \"yyyy-MM-dd\'T\'HH:mm:ss.fff\", System.Globalization.CultureInfo.InvariantCul" +
                    "ture), DateTimeKind.Utc);\r\n            }\r\n            public TimePointSec(DateTi" +
                    "me value)\r\n            {\r\n                Moment = value;\r\n            }\r\n      " +
                    "      public static implicit operator uint(TimePointSec value) => value.Value;\r\n" +
                    "            public static implicit operator DateTime(TimePointSec value) => valu" +
                    "e.Moment;\r\n            public static implicit operator TimePointSec(uint value) " +
                    "=> new TimePointSec(value);\r\n            public static implicit operator TimePoi" +
                    "ntSec(DateTime value) => new TimePointSec(value);\r\n            public static imp" +
                    "licit operator TimePointSec(string value) => new TimePointSec(value);\r\n         " +
                    "   public override string ToString() => Moment.ToString(\"yyyy-MM-dd HH:mm:ss.fff" +
                    "\");\r\n\r\n            public string Serialize() => Value.ToString();\r\n            /" +
                    "// <summary>\r\n            /// NewtonSoft already deserializes the DateTime strin" +
                    "g properly, so we just need to ensure we specify it\'s in UTC, but we also suppor" +
                    "t ulong and raw string.\r\n            /// </summary>\r\n            /// <param name" +
                    "=\"reader\"></param>\r\n            /// <returns></returns>\r\n            public Time" +
                    "PointSec Deserialize(JsonReader reader)\r\n            {\r\n                if (read" +
                    "er.Value is DateTime t) return DateTime.SpecifyKind(t, DateTimeKind.Utc);\r\n     " +
                    "           else if (reader.Value is string s) return uint.TryParse(s, out uint v" +
                    ") ? new TimePointSec(v) : new TimePointSec(s);\r\n                else throw new A" +
                    "rgumentException($\"Cannot deserialize \'{reader.Value}\' as a {nameof(TimePointSec" +
                    ")}\");\r\n            }\r\n            public override int GetHashCode() => Moment.Ge" +
                    "tHashCode();\r\n            public override bool Equals(object obj) => obj?.GetHas" +
                    "hCode().Equals(GetHashCode()) ?? false;\r\n        }\r\n\t} \r\n");
            
            #line 810 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 }
if (includeEosSharpTest)
{ 
    string safeExportName = getSafeTypeName(exportName, "c_");

            
            #line default
            #line hidden
            this.Write("    public static class Test\r\n    {\r\n        public static async Task Run()\r\n    " +
                    "    {\r\n            var api = new EosApi(new EosConfigurator()\r\n            {\r\n  " +
                    "              SignProvider = null,\r\n                HttpEndpoint = \"");
            
            #line 822 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(api));
            
            #line default
            #line hidden
            this.Write("\",\r\n                ChainId = \"");
            
            #line 823 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chainId));
            
            #line default
            #line hidden
            this.Write("\"\r\n            }, new HttpHandler());\r\n            var result = await Contracts.");
            
            #line 825 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(safeExportName));
            
            #line default
            #line hidden
            this.Write(".Tables.");
            
            #line 825 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeTypeName(tables[0].name, "c_")));
            
            #line default
            #line hidden
            this.Write(".Query(api);\r\n            Console.WriteLine($\"First row from {Contracts.");
            
            #line 826 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(safeExportName));
            
            #line default
            #line hidden
            this.Write(".Tables.");
            
            #line 826 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getSafeTypeName(tables[0].name, "c_")));
            
            #line default
            #line hidden
            this.Write(".TableName} table: {JsonConvert.SerializeObject(result.rows.FirstOrDefault())}\");" +
                    "\r\n        }\r\n        public static void TestEosioTypeSerialization()\r\n        {\r" +
                    "\n            string raw, json;\r\n            raw = \"1.00000000 WAX\";\r\n           " +
                    " Model.eosio.Asset a = raw;\r\n            json = JsonConvert.SerializeObject(a);\r" +
                    "\n            var ad = JsonConvert.DeserializeObject<Model.eosio.Asset>(json);\r\n " +
                    "           if (!a.Equals(ad)) throw new ApplicationException($\"Values don\'t matc" +
                    "h: {a} Vs {ad} (\'{raw}\' serialized: {json})\");\r\n            raw = new string(\'a\'" +
                    ", CheckSum256.ExpectedLength);\r\n            Model.eosio.CheckSum256 c = raw;\r\n  " +
                    "          json = JsonConvert.SerializeObject(c);\r\n            var cd = JsonConve" +
                    "rt.DeserializeObject<Model.eosio.CheckSum256>(json);\r\n            if (!c.Equals(" +
                    "cd)) throw new ApplicationException($\"Values don\'t match: {c} Vs {cd} (\'{raw}\' s" +
                    "erialized: {json})\");\r\n            raw = \"y3zra.wam\";\r\n            Model.eosio.N" +
                    "ame n = raw;\r\n            json = JsonConvert.SerializeObject(n);\r\n            va" +
                    "r nd = JsonConvert.DeserializeObject<Model.eosio.Name>(json);\r\n            if (!" +
                    "n.Equals(nd)) throw new ApplicationException($\"Values don\'t match: {n} Vs {nd} (" +
                    "\'{raw}\' serialized: {json})\");\r\n            raw = \"8,WAX\";\r\n            Model.eo" +
                    "sio.Symbol s = raw;\r\n            json = JsonConvert.SerializeObject(s);\r\n       " +
                    "     var sd = JsonConvert.DeserializeObject<Model.eosio.Symbol>(json);\r\n        " +
                    "    if (!s.Equals(sd)) throw new ApplicationException($\"Values don\'t match: {s} " +
                    "Vs {sd} (\'{raw}\' serialized: {json})\");\r\n            raw = \"2022-10-21T13:19:59." +
                    "000\";\r\n            Model.eosio.TimePoint t = raw;\r\n            json = JsonConver" +
                    "t.SerializeObject(t);\r\n            var td = JsonConvert.DeserializeObject<Model." +
                    "eosio.TimePoint>(json);\r\n            if (!t.Equals(td)) throw new ApplicationExc" +
                    "eption($\"Values don\'t match: {t} Vs {td} (\'{raw}\' serialized: {json})\");\r\n      " +
                    "      // Reuse raw value\r\n            Model.eosio.TimePointSec ts = raw;\r\n      " +
                    "      json = JsonConvert.SerializeObject(ts);\r\n            var tsd = JsonConvert" +
                    ".DeserializeObject<Model.eosio.TimePointSec>(json);\r\n            if (!ts.Equals(" +
                    "tsd)) throw new ApplicationException($\"Values don\'t match: {ts} Vs {tsd} (\'{raw}" +
                    "\' serialized: {json})\");\r\n        }\r\n    }\r\n");
            
            #line 863 "D:\github\ABI2CSharp\Templates\AbiCodeGen.tt"
 }

            
            #line default
            #line hidden
            this.Write("}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class AbiCodeGenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
